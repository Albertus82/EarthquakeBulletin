<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="earthquake-bulletin" default="all" xmlns:as="antlib:org.codehaus.mojo.animal_sniffer" xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="version.number" value="2.0.0" />

	<property environment="env" />
	<property name="env.JRE8_HOME" value="${env.JAVA_HOME}/../jdk1.8.0_191/jre" />

	<property file="build.properties" />

	<filter token="project.artifactId" value="${project.artifactId}" />
	<filter token="project.url" value="${project.url}" />

	<filter token="macos.jarFileName" value="${macos.jarFileName}" />
	<filter token="linux.jarFileName" value="${linux.jarFileName}" />
	<filter token="mainClass" value="${mainClass}" />
	<filter token="vm.initialHeapSize" value="${vm.initialHeapSize}" />
	<filter token="vm.maxHeapSize" value="${vm.maxHeapSize}" />

	<filter token="feregion.mainClass" value="${feregion.mainClass}" />
	<filter token="feregion.vm.initialHeapSize" value="${feregion.vm.initialHeapSize}" />
	<filter token="feregion.vm.maxHeapSize" value="${feregion.vm.maxHeapSize}" />

	<target name="clean">
		<delete dir="${build.directory}" />
		<delete file="sonar-project.properties" />
	</target>

	<target name="distclean">
		<delete dir="${build.distDirectory}" includes="*.*" />
	</target>

	<fileset id="classpath" dir="${dependencies.directory}">
		<!-- Platform-independent libraries -->
		<include name="compile/common/*.jar" />
		<!-- Oldest SWT version in the package -->
		<include name="compile/platform-dependent/gtk-linux-armhf/*.jar" />
	</fileset>

	<target name="compile">
		<mkdir dir="${build.outputDirectory}" />
		<javac srcdir="${build.sourceDirectory}" destdir="${build.outputDirectory}" source="${build.compiler.source}" target="${build.compiler.target}" debug="true" includeantruntime="false">
			<classpath>
				<fileset refid="classpath" />
			</classpath>
			<bootclasspath path="${build.compiler.compilerArguments.bootclasspath}" />
			<compilerarg value="-version" />
		</javac>
	</target>

	<target name="check-signature" depends="compile">
		<typedef uri="antlib:org.codehaus.mojo.animal_sniffer">
			<classpath path="${animalSniffer.directory}/animal-sniffer-ant-tasks-1.16.jar" />
		</typedef>
		<as:check-signature signature="${animalSniffer.directory}/java18-1.0.signature">
			<path path="${build.outputDirectory}" />
			<classpath>
				<fileset refid="classpath" />
			</classpath>
		</as:check-signature>
	</target>

	<target name="resources">
		<copy todir="${build.outputDirectory}" includeemptydirs="false">
			<fileset dir="${build.resourcesDirectory}" excludes="**/*.properties" />
		</copy>
		<!-- Filtering "properties" files -->
		<filter token="version.number" value="${version.number}" />
		<tstamp>
			<format property="version.date" pattern="yyyy-MM-dd" />
		</tstamp>
		<filter token="version.date" value="${version.date}" />
		<copy todir="${build.outputDirectory}" filtering="true" overwrite="true" includeemptydirs="false">
			<fileset dir="${build.resourcesDirectory}" includes="**/*.properties" />
		</copy>
	</target>

	<target name="lib">
		<union id="lib">
			<fileset dir="${dependencies.directory}/compile/common">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${dependencies.directory}">
				<include name="license/*.txt" />
			</fileset>
		</union>

		<!-- Copy dependencies -->
		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86/app/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/win32-win32-x86">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/win32-win32-x86_64">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/gtk-linux-x86">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/gtk-linux-x86_64">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/gtk-linux-armhf">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${dependencies.directory}">
			<resources refid="lib" />
			<fileset dir="${dependencies.directory}/compile/platform-dependent/cocoa-macosx-x86_64">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- Prepare MANIFEST.MF files -->
		<manifestclasspath property="classpath.win32-win32-x86" jarfile="${build.assemblyDirectory}/dist/win32-win32-x86/app/${windows.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/win32-win32-x86/app/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<manifestclasspath property="classpath.win32-win32-x86_64" jarfile="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${windows.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<manifestclasspath property="classpath.gtk-linux-x86" jarfile="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/${linux.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<manifestclasspath property="classpath.gtk-linux-x86_64" jarfile="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/${linux.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<manifestclasspath property="classpath.gtk-linux-armhf" jarfile="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${linux.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<manifestclasspath property="classpath.cocoa-macosx-x86_64" jarfile="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${macos.jarFileName}" maxParentLevels="0">
			<classpath>
				<fileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${dependencies.directory}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
	</target>

	<target name="config">
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/win32-win32-x86/config/${windows.cfgFileName}" failonerror="false" />
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/win32-win32-x86_64/config/${windows.cfgFileName}" failonerror="false" />
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/.${project.artifactId}/${linux.cfgFileName}" failonerror="false" />
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/.${project.artifactId}/${linux.cfgFileName}" failonerror="false" />
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/.${project.artifactId}/${linux.cfgFileName}" failonerror="false" />
		<copy file="${build.configDirectory}/${project.artifactId}.cfg" tofile="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/config/${macos.cfgFileName}" failonerror="false" />
	</target>

	<target name="scripts">
		<fileset id="bat" dir="${build.scriptSourceDirectory}">
			<include name="*.bat" />
		</fileset>
		<fileset id="sh" dir="${build.scriptSourceDirectory}">
			<include name="*.sh" />
		</fileset>
		<fileset id="command" dir="${build.scriptSourceDirectory}">
			<include name="*.command" />
		</fileset>

		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86/app" failonerror="false" filtering="true">
			<fileset refid="bat" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86_64/app" failonerror="false" filtering="true">
			<fileset refid="bat" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}" failonerror="false" filtering="true">
			<fileset refid="sh" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}" failonerror="false" filtering="true">
			<fileset refid="sh" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}" failonerror="false" filtering="true">
			<fileset refid="sh" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/scripts" failonerror="false" filtering="true">
			<fileset refid="command" />
		</copy>
	</target>

	<fileset id="docs" dir="">
		<include name="README*" />
		<include name="LICENSE*" />
		<include name="NOTICE*" />
	</fileset>

	<target name="docs">
		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86/app">
			<fileset refid="docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/win32-win32-x86_64/app">
			<fileset refid="docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}">
			<fileset refid="docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}">
			<fileset refid="docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}">
			<fileset refid="docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/docs">
			<fileset refid="docs" />
		</copy>
	</target>

	<target name="icons">
		<copy file="${icons.directory}/main.ico" tofile="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/${linux.iconFileName}" failonerror="false" />
		<copy file="${icons.directory}/main.ico" tofile="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/${linux.iconFileName}" failonerror="false" />
		<copy file="${icons.directory}/main.ico" tofile="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${linux.iconFileName}" failonerror="false" />
		<copy file="${icons.directory}/main.icns" tofile="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${macos.iconFileName}" failonerror="false" />
	</target>

	<target name="jar" depends="check-signature, resources, config, scripts, docs, icons, lib">
		<jar destfile="${build.assemblyDirectory}/dist/win32-win32-x86/app/${windows.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.win32-win32-x86}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
		<jar destfile="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${windows.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.win32-win32-x86_64}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
		<jar destfile="${build.assemblyDirectory}/dist/gtk-linux-x86/${project.artifactId}/${linux.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.gtk-linux-x86}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
		<jar destfile="${build.assemblyDirectory}/dist/gtk-linux-x86_64/${project.artifactId}/${linux.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.gtk-linux-x86_64}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
		<jar destfile="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${linux.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.gtk-linux-armhf}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
		<jar destfile="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${macos.jarFileName}" basedir="${build.outputDirectory}" level="9">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${classpath.cocoa-macosx-x86_64}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version.number}" />
				<attribute name="X-Compile-Source-JDK" value="${build.compiler.source}" />
				<attribute name="X-Compile-Target-JDK" value="${build.compiler.target}" />
			</manifest>
			<metainf refid="docs" />
		</jar>
	</target>

	<target name="dist-macos" depends="jar">
		<taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" classpath="${jarBundler.directory}/jarbundler-core-3.3.0.jar" />

		<mkdir dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle" />
		<jarbundler vmoptions="${macos.vmoptions}" dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle" name="${project.name}" mainclass="${mainClass}" startonmainthread="true" version="${version.number}" icon="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${macos.iconFileName}" usejavaxkey="true" jvmversion="${build.compiler.target}+" stubfile="${jarBundler.directory}/universalJavaApplicationStub" highresolutioncapable="true">
			<jarfileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app" includes="**/*.jar" />
		</jarbundler>

		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle/${project.name}.app/Contents/Library/Preferences" failonerror="false">
			<fileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/config" />
		</copy>

		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle/${project.name}.app/Contents/SharedSupport">
			<fileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/docs" />
		</copy>
		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle/${project.name}.app/Contents/SharedSupport/Dependencies" failonerror="false">
			<fileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/app/${dependencies.directory}/license" />
		</copy>

		<copy todir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle/${project.name}.app/Contents/Resources/Java" failonerror="false" filtering="true">
			<fileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/scripts" />
		</copy>

		<tar destfile="${build.distDirectory}/${project.artifactId}-${version.number}-cocoa-macosx-x86_64-app.tar.gz" compression="gzip">
			<tarfileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle" filemode="755">
				<include name="${project.name}.app/Contents/MacOS/*" />
				<include name="${project.name}.app/Contents/Resources/Java/*.command" />
			</tarfileset>
			<tarfileset dir="${build.assemblyDirectory}/dist/cocoa-macosx-x86_64/bundle">
				<exclude name="${project.name}.app/Contents/MacOS/*" />
				<exclude name="${project.name}.app/Contents/Resources/Java/*.command" />
			</tarfileset>
		</tar>
	</target>

	<target name="dist-linux" depends="jar">
		<tar destfile="${build.distDirectory}/${project.artifactId}-${version.number}-gtk-linux-x86-bin.tar.gz" compression="gzip">
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86" filemode="755">
				<include name="${project.artifactId}/*.jar" />
				<include name="${project.artifactId}/*.sh" />
			</tarfileset>
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86">
				<exclude name="${project.artifactId}/*.jar" />
				<exclude name="${project.artifactId}/*.sh" />
			</tarfileset>
		</tar>
		<tar destfile="${build.distDirectory}/${project.artifactId}-${version.number}-gtk-linux-x86_64-bin.tar.gz" compression="gzip">
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86_64" filemode="755">
				<include name="${project.artifactId}/*.jar" />
				<include name="${project.artifactId}/*.sh" />
			</tarfileset>
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-x86_64">
				<exclude name="${project.artifactId}/*.jar" />
				<exclude name="${project.artifactId}/*.sh" />
			</tarfileset>
		</tar>
		<tar destfile="${build.distDirectory}/${project.artifactId}-${version.number}-gtk-linux-armhf-bin.tar.gz" compression="gzip">
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-armhf" filemode="755">
				<include name="${project.artifactId}/*.jar" />
				<include name="${project.artifactId}/*.sh" />
			</tarfileset>
			<tarfileset dir="${build.assemblyDirectory}/dist/gtk-linux-armhf">
				<exclude name="${project.artifactId}/*.jar" />
				<exclude name="${project.artifactId}/*.sh" />
			</tarfileset>
		</tar>
	</target>

	<target name="dist-windows" depends="jar">
		<echo message="os.name: ${os.name}" />
		<echo message="os.arch: ${os.arch}" />
		<echo message="os.version: ${os.version}" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.directory}/launch4j.jar:${launch4j.directory}/lib/xstream.jar" />
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/win32">
			<and>
				<os family="windows" />
				<available file="${launch4j.directory}/bin/win32" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/macosx-x86">
			<and>
				<os family="mac" />
				<available file="${launch4j.directory}/bin/macosx-x86" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux">
			<and>
				<os family="unix" />
				<os arch="x86" />
				<not>
					<os name="mac os x" />
				</not>
				<available file="${launch4j.directory}/bin/linux" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-x64">
			<and>
				<os family="unix" />
				<os arch="amd64" />
				<not>
					<os name="mac os x" />
				</not>
				<available file="${launch4j.directory}/bin/linux-x64" type="dir" />
			</and>
		</condition>

		<echo message="launch4j.bindir: ${launch4j.bindir}" />

		<chmod perm="+x" file="${launch4j.bindir}/ld" failonerror="false" failifexecutionfails="false" ignoremissing="true" />
		<chmod perm="+x" file="${launch4j.bindir}/windres" failonerror="false" failifexecutionfails="false" ignoremissing="true" />

		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.assemblyDirectory}/dist/win32-win32-x86/app/${windows.exeFileName}" jarpath="${windows.jarFileName}" headertype="${launch4j.headerType}" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir="." icon="${icons.directory}/main.ico">
				<singleInstance mutexname="${mainClass}" windowtitle="${project.name}" />
				<jre runtimebits="32" minversion="${build.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${vm.initialHeapSize}" maxheapsize="${vm.maxHeapSize}" />
				<versionInfo fileversion="${version.number}.0" txtfileversion="${version.number}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${version.number}.0" txtproductversion="${version.number}" productname="${project.name}" internalname="${project.artifactId}" originalfilename="${windows.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.assemblyDirectory}/dist/win32-win32-x86/app/${launch4j.feregion.name}.exe" jarpath="${windows.jarFileName}" headertype="${launch4j.feregion.headerType}" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir=".">
				<jre minversion="${build.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${feregion.vm.initialHeapSize}" maxheapsize="${feregion.vm.maxHeapSize}" />
				<classPath mainclass="${feregion.mainClass}" cp="${dependencies.directory}/*.jar" />
				<versionInfo fileversion="${version.number}.0" txtfileversion="${version.number}" filedescription="${launch4j.feregion.name}" copyright="${launch4j.copyright}" productversion="${version.number}.0" txtproductversion="${version.number}" productname="${launch4j.feregion.name}" internalname="${launch4j.feregion.name}" originalfilename="${launch4j.feregion.name}.exe" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<echo file="${build.assemblyDirectory}/dist/win32-win32-x86/setup.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${version.number}
			VersionInfoVersion=${version.number}
			AppId=${innoSetup.AppId.x86}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			PrivilegesRequired=lowest
			DefaultDirName={userappdata}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x86

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "app\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "app\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
			Name: "startupicon"; Description: "{cm:AutoStartProgram,${project.name}}"; GroupDescription: "{cm:AutoStartProgramGroupDescription}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{userdesktop}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: desktopicon
			Name: "{userstartup}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: startupicon

			[Files]
			Source: "app\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "config\*"; DestDir: "{userappdata}\${project.name}"; Flags: onlyifdoesntexist skipifsourcedoesntexist
			Source: "setup.log"; DestDir: "{userappdata}\${project.name}"; DestName: "${dependencies.logFileName}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{userappdata}\${project.name}\${dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<pathconvert pathsep="&#13;&#10;" property="dependencies.log.x86">
			<fileset dir="${build.assemblyDirectory}/dist/win32-win32-x86/app/${dependencies.directory}">
				<include name="*.jar" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>

		<echo file="${build.assemblyDirectory}/dist/win32-win32-x86/setup.log">${dependencies.log.x86}</echo>

		<exec osfamily="windows" executable="${innoSetup.directory}/ISCC.exe" failonerror="true">
			<arg value="${build.assemblyDirectory}/dist/win32-win32-x86/setup.iss" />
			<arg value="/O${build.distDirectory}" />
			<arg value="/F${project.artifactId}-${version.number}-win32-win32-x86-setup" />
		</exec>
		<exec osfamily="unix" executable="wine" failonerror="true">
			<arg value="${innoSetup.directory}/ISCC.exe" />
			<arg value="${build.assemblyDirectory}/dist/win32-win32-x86/setup.iss" />
			<arg value="/O${build.distDirectory}" />
			<arg value="/F${project.artifactId}-${version.number}-win32-win32-x86-setup" />
		</exec>

		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${windows.exeFileName}" jarpath="${windows.jarFileName}" headertype="${launch4j.headerType}" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir="." icon="${icons.directory}/main.ico">
				<singleInstance mutexname="${mainClass}" windowtitle="${project.name}" />
				<jre runtimebits="64" minversion="${build.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${vm.initialHeapSize}" maxheapsize="${vm.maxHeapSize}" />
				<versionInfo fileversion="${version.number}.0" txtfileversion="${version.number}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${version.number}.0" txtproductversion="${version.number}" productname="${project.name}" internalname="${project.artifactId}" originalfilename="${windows.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${launch4j.feregion.name}.exe" jarpath="${windows.jarFileName}" headertype="${launch4j.feregion.headerType}" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir=".">
				<jre minversion="${build.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${feregion.vm.initialHeapSize}" maxheapsize="${feregion.vm.maxHeapSize}" />
				<classPath mainclass="${feregion.mainClass}" cp="${dependencies.directory}/*.jar" />
				<versionInfo fileversion="${version.number}.0" txtfileversion="${version.number}" filedescription="${launch4j.feregion.name}" copyright="${launch4j.copyright}" productversion="${version.number}.0" txtproductversion="${version.number}" productname="${launch4j.feregion.name}" internalname="${launch4j.feregion.name}" originalfilename="${launch4j.feregion.name}.exe" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<echo file="${build.assemblyDirectory}/dist/win32-win32-x86_64/setup.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${version.number}
			VersionInfoVersion=${version.number}
			AppId=${innoSetup.AppId.x64}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			PrivilegesRequired=lowest
			DefaultDirName={userappdata}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x64
			ArchitecturesInstallIn64BitMode=x64

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "app\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "app\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
			Name: "startupicon"; Description: "{cm:AutoStartProgram,${project.name}}"; GroupDescription: "{cm:AutoStartProgramGroupDescription}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{userdesktop}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: desktopicon
			Name: "{userstartup}\${project.name}"; Filename: "{app}\${windows.exeFileName}"; Tasks: startupicon

			[Files]
			Source: "app\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "config\*"; DestDir: "{userappdata}\${project.name}"; Flags: onlyifdoesntexist skipifsourcedoesntexist
			Source: "setup.log"; DestDir: "{userappdata}\${project.name}"; DestName: "${dependencies.logFileName}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{userappdata}\${project.name}\${dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<pathconvert pathsep="&#13;&#10;" property="dependencies.log.x86_64">
			<fileset dir="${build.assemblyDirectory}/dist/win32-win32-x86_64/app/${dependencies.directory}">
				<include name="*.jar" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>

		<echo file="${build.assemblyDirectory}/dist/win32-win32-x86_64/setup.log">${dependencies.log.x86_64}</echo>

		<exec osfamily="windows" executable="${innoSetup.directory}/ISCC.exe" failonerror="true">
			<arg value="${build.assemblyDirectory}/dist/win32-win32-x86_64/setup.iss" />
			<arg value="/O${build.distDirectory}" />
			<arg value="/F${project.artifactId}-${version.number}-win32-win32-x86_64-setup" />
		</exec>
		<exec osfamily="unix" executable="wine" failonerror="true">
			<arg value="${innoSetup.directory}/ISCC.exe" />
			<arg value="${build.assemblyDirectory}/dist/win32-win32-x86_64/setup.iss" />
			<arg value="/O${build.distDirectory}" />
			<arg value="/F${project.artifactId}-${version.number}-win32-win32-x86_64-setup" />
		</exec>
	</target>

	<target name="dist" depends="dist-linux, dist-macos, dist-windows" />

	<available file="${build.testSourceDirectory}" type="dir" property="build.test" />

	<target name="test" depends="jar" if="build.test">
		<mkdir dir="${build.outputTestDirectory}" />
		<javac srcdir="${build.testSourceDirectory}" destdir="${build.outputTestDirectory}" source="${build.compiler.source}" target="${build.compiler.target}" debug="true" includeantruntime="false">
			<classpath path="${build.outputDirectory}">
				<fileset refid="classpath" />
				<fileset dir="${dependencies.directory}/test">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<bootclasspath path="${build.compiler.compilerArguments.bootclasspath}" />
		</javac>

		<copy todir="${build.outputTestDirectory}" failonerror="false">
			<fileset dir="${build.testResourcesDirectory}" />
		</copy>

		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
			<classpath path="${jacoco.directory}/jacocoant.jar" />
		</taskdef>
		<jacoco:coverage destfile="${build.distDirectory}/jacoco/jacoco.exec">
			<junit printsummary="yes" haltonfailure="yes" fork="true" forkmode="once" maxmemory="64m">
				<classpath path="${build.outputTestDirectory}">
					<path location="${build.assemblyDirectory}/dist/gtk-linux-armhf/${project.artifactId}/${linux.jarFileName}" />
					<fileset dir="${dependencies.directory}/test">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<batchtest>
					<fileset dir="${build.outputTestDirectory}">
						<include name="**/*Test*.class" />
						<exclude name="**/*$*.class" />
					</fileset>
				</batchtest>
				<formatter type="plain" usefile="false" />
			</junit>
		</jacoco:coverage>
	</target>

	<target name="sonar-main">
		<propertyfile file="sonar-project.properties">
			<entry key="sonar.projectKey" value="${project.groupId}:${project.artifactId}" />
			<entry key="sonar.projectName" value="${project.name}" />
			<entry key="sonar.projectVersion" value="${version.number}" />
			<entry key="sonar.sources" value="${build.sourceDirectory}" />
			<entry key="sonar.language" value="java" />
			<entry key="sonar.java.source" value="${build.compiler.source}" />
			<entry key="sonar.java.target" value="${build.compiler.target}" />
			<entry key="sonar.java.libraries" value="${dependencies.directory}/compile/common/*.jar,${dependencies.directory}/compile/platform-dependent/**/*.jar" />
			<entry key="sonar.java.binaries" value="${build.outputDirectory}" />
			<entry key="sonar.sourceEncoding" value="UTF-8" />
		</propertyfile>
	</target>

	<target name="sonar-test" depends="sonar-main" if="build.test">
		<propertyfile file="sonar-project.properties">
			<entry key="sonar.tests" value="${build.testSourceDirectory}" />
			<entry key="sonar.java.test.libraries" value="${dependencies.directory}/compile/common/*.jar,${dependencies.directory}/compile/platform-dependent/**/*.jar,${dependencies.directory}/test/*.jar" />
			<entry key="sonar.java.test.binaries" value="${build.outputTestDirectory}" />
			<entry key="sonar.jacoco.reportPaths" value="${build.directory}/jacoco/jacoco.exec" />
		</propertyfile>
	</target>

	<target name="sonar" depends="sonar-main, sonar-test">
		<echoproperties srcfile="sonar-project.properties" />
	</target>

	<target name="all" depends="clean, dist, test, sonar" />

</project>
